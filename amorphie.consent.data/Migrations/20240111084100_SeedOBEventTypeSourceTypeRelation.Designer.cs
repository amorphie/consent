// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using amorphie.consent.data;

#nullable disable

namespace amorphie.consent.data.Migrations
{
    [DbContext(typeof(ConsentDbContext))]
    [Migration("20240111084100_SeedOBEventTypeSourceTypeRelation")]
    partial class SeedOBEventTypeSourceTypeRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ScopeTCKN")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"State\", '') || ' ' || coalesce(\"ConsentType\", '') || ' ' || coalesce(\"AdditionalData\", ''))", true);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StateModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long?>("UserTCKN")
                        .HasColumnType("bigint");

                    b.Property<string>("Variant")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AccountReferences")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastValidAccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("PermissionTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("TransactionInquiryEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TransactionInquiryStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBAccountReferences");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBConsentIdentityInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("IdentityData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBConsentIdentityInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventSubscriptions");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OBEventSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OBEventSubscriptionId");

                    b.ToTable("OBEventSubscriptionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventTypeSourceTypeRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("APIToGetData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationReporter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RetryInMinute")
                        .HasColumnType("integer");

                    b.Property<string>("RetryPolicy")
                        .HasColumnType("text");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventTypeSourceTypeRelations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bf4a8dd-1531-4ca8-bed9-cfc4ae035bee"),
                            APIToGetData = "GET /odeme-emri/{odemeEmriNo}",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(870),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "Tüm ödeme durum değişikliklerinde",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "KAYNAK_GUNCELLENDI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(870),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 30,
                            RetryPolicy = "30 Dakika - 3 Deneme",
                            SourceNumber = "odemeEmriNo",
                            SourceType = "ODEME_EMRI",
                            YOSRole = "ÖBH"
                        },
                        new
                        {
                            Id = new Guid("55cf6777-4542-4e26-bfb5-8df4600e4e5c"),
                            APIToGetData = "GET /hesap-bilgisi-rizasi/{RizaNo}",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(910),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "Rıza iptal detay kodu ‘02’ : Kullanıcı İsteği ile HHS üzerinden İptal durumunda",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "KAYNAK_GUNCELLENDI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(910),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 30,
                            RetryPolicy = "30 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "HESAP_BILGISI_RIZASI",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("17322cb5-20e5-4046-bddb-78e84d30b6e4"),
                            APIToGetData = "GET /hesaplar/{hspRef}/bakiye",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(940),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "Bakiye nesnesindeki tutarla ilgili bir bilgi değiştiğinde ve HBH rızası içerisinde \"06-Anlık Bakiye Bildirimi\" izin türü varsa oluşturulur.\n\nMevcutta alınmış rızalar için bakiye kaynak tipi özelinde 06 izin türü gerektiğinden; mevcut rızanın yenilenmesine dair müşteriye bilgilendirme yapılarak 06 izin türünü kapsayan yeni rıza alınması süreci YÖS tarafından gerçekleştirilebilir.\n\nBloke tutar değişikliği için olay oluşturma ve bildirimi HHS inisiyatifindedir.\n\nKrdHsp içerisinde yer alan kulKrdTtr değerinin değiştiği durumda olay bildirim gönderilmesi gerekmektedir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Maksimum 10 dakika içerisinde",
                            EventType = "KAYNAK_GUNCELLENDI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(940),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryPolicy = "Retry policy uygulanmamalıdır. İlk istek gönderilemediği durumda İletilemeyen Olaylara eklenmelidir.",
                            SourceNumber = "hspRef",
                            SourceType = "BAKIYE",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("f766cd71-265a-4de0-8d0e-40d02effc336"),
                            APIToGetData = "",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(970),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "İlgili API İlke ve kurallarına eklendiğinde güncellenecektir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "",
                            EventType = "KAYNAK_GUNCELLENDI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(970),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 30,
                            RetryPolicy = "30 Dakika - 3 Deneme",
                            SourceNumber = "",
                            SourceType = "COKLU_ISLEM_TALEBI ( bulk-data)",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("85a73a7d-7519-4c1b-bb9a-099bbbdb3686"),
                            APIToGetData = "GET /yetkilendirme-kodu?rizaNo={rizaNo}}&rizaTip=O",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(990),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladığında rıza oluşturulur. YÖS'e rıza oluşturulduğuna dair bildirim yapılır. YÖS yetkod değerini sorgulama sonucunda elde eder.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARILI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(990),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "ODEME_EMRI_RIZASI",
                            YOSRole = "ÖBH"
                        },
                        new
                        {
                            Id = new Guid("cc538bf8-fb05-4515-9a69-d017e9e3228e"),
                            APIToGetData = "GET /yetkilendirme-kodu?rizaNo={rizaNo}}&rizaTip=H",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1010),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladığında rıza oluşturulur. YÖS'e rıza oluşturulduğuna dair bildirim yapılır. YÖS yetkod değerini sorgulama sonucunda elde eder.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARILI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1010),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "HESAP_BILGISI_RIZASI",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("80a51750-7100-4d54-85c8-442774f8494c"),
                            APIToGetData = "GET /odeme-emri-rizasi/{RizaNo}",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1040),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladıktan sonra yaptığı kontroller neticesinde logine izin vermez ise YÖS'e bildirim yapılır. YÖS rıza durumunu sorgulayarak işlemin neden iletilmediğine dair bilgi edinebilir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARISIZ",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1040),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "ODEME_EMRI_RIZASI",
                            YOSRole = "ÖBH"
                        },
                        new
                        {
                            Id = new Guid("e7778043-2ac8-4136-b93f-abe79d720203"),
                            APIToGetData = "GET /hesap-bilgisi-rizasi/{RizaNo}",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1060),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladıktan sonra yaptığı kontroller neticesinde logine izin vermez ise YÖS'e bildirim yapılır. YÖS rıza durumunu sorgulayarak işlemin neden iletilmediğine dair bilgi edinebilir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARISIZ",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1060),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "HESAP_BILGISI_RIZASI",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("80a30b1d-406c-4fba-bdb4-29d66bdc664f"),
                            APIToGetData = "GET /hhs/{hhsKod}",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1110),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS bilgilerinde değişiklik olduğunda, YÖS'ün hhsKod ile sorgulama yapması ve değişen bilgiyi güncellemesi beklenmektedir",
                            EventNotificationReporter = "BKM",
                            EventNotificationTime = "Anlık",
                            EventType = "HHS_YOS_GUNCELLENDI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1110),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 5,
                            RetryPolicy = "5 Dakika - 3 Deneme",
                            SourceNumber = "hhsKod",
                            SourceType = "HHS",
                            YOSRole = "YÖS"
                        },
                        new
                        {
                            Id = new Guid("1421ba33-e7ae-4c59-9182-fc68d4e82bb2"),
                            APIToGetData = "GET /yos/{yosKod}",
                            CreatedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1130),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "YÖS bilgilerinde değişiklik olduğunda, HHS'nin yosKod ile sorgulama yapması ve değişen bilgiyi güncellemesi beklenmektedir.",
                            EventNotificationReporter = "BKM",
                            EventNotificationTime = "Anlık",
                            EventType = "HHS_YOS_GUNCELLENDI",
                            ModifiedAt = new DateTime(2024, 1, 11, 8, 41, 0, 460, DateTimeKind.Utc).AddTicks(1130),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 5,
                            RetryPolicy = "5 Dakika - 3 Deneme",
                            SourceNumber = "yosKod",
                            SourceType = "YÖS",
                            YOSRole = "HHS"
                        });
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConsentDetailType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentOrders");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBYosInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("acikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("adresler")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("logoBilgileri")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("roller")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBYosInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("ExpireTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"TokenValue\", '') || ' ' || coalesce(\"TokenType\", ''))", true);

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountReference", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBAccountReferences")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBConsentIdentityInfo", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("ObConsentIdentityInfos")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.OBEventSubscription", "OBEventSubscription")
                        .WithMany("OBEventSubscriptionTypes")
                        .HasForeignKey("OBEventSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OBEventSubscription");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("Tokens")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Navigation("OBAccountReferences");

                    b.Navigation("ObConsentIdentityInfos");

                    b.Navigation("PaymentOrders");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Navigation("OBEventSubscriptionTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
