// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using amorphie.consent.data;

#nullable disable

namespace amorphie.consent.data.Migrations
{
    [DbContext(typeof(ConsentDbContext))]
    [Migration("20240621111336_OBEventInsertUpdateScript")]
    partial class OBEventInsertUpdateScript
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastValidAccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ScopeTCKN")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"State\", '') || ' ' || coalesce(\"ConsentType\", '') || ' ' || coalesce(\"AdditionalData\", ''))", true);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateCancelDetailCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("StateModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long?>("UserTCKN")
                        .HasColumnType("bigint");

                    b.Property<string>("Variant")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AccountReferences")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionCustomerNumber")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OhkMessage")
                        .HasColumnType("text");

                    b.Property<List<string>>("PermissionTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SendToServiceDeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SendToServiceLastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SendToServiceTryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TransactionInquiryEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TransactionInquiryStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBAccountConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBErrorCodeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BkmCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InternalCode")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBErrorCodeDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bf82773-c74a-43a8-98ad-253b3183b485"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 211,
                            Message = "There can be only one item in olaylar object.",
                            MessageTr = "Olaylar nesnesi içerisinde sadece 1 tane olay olabilir."
                        },
                        new
                        {
                            Id = new Guid("ef21aad7-bae6-4e05-b228-e78362e60c07"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 212,
                            Message = "Event type source type relation is incorrect in BKM system event post process.",
                            MessageTr = "BKM sistem olay dinleme mesajında yer alan olay tipi - kaynak tipi verileri hatalı."
                        });
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("OBEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventSubscriptions");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OBEventSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OBEventSubscriptionId");

                    b.ToTable("OBEventSubscriptionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventTypeSourceTypeRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("APIToGetData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationReporter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsImmediateNotification")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RetryInMinute")
                        .HasColumnType("integer");

                    b.Property<string>("RetryPolicy")
                        .HasColumnType("text");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventTypeSourceTypeRelations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1a20d09-d60f-47c0-8140-a9037654eddf"),
                            APIToGetData = "GET /odeme-emri/{odemeEmriNo}",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4720),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "Tüm ödeme durum değişikliklerinde",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "KAYNAK_GUNCELLENDI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4730),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 30,
                            RetryPolicy = "30 Dakika - 3 Deneme",
                            SourceNumber = "odemeEmriNo",
                            SourceType = "ODEME_EMRI",
                            YOSRole = "ÖBH"
                        },
                        new
                        {
                            Id = new Guid("60de6441-dc10-4df5-8f1e-1641b11da815"),
                            APIToGetData = "GET /hesap-bilgisi-rizasi/{RizaNo}",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4750),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "Rıza iptal detay kodu ‘02’ : Kullanıcı İsteği ile HHS üzerinden İptal durumunda",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "KAYNAK_GUNCELLENDI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4750),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 30,
                            RetryPolicy = "30 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "HESAP_BILGISI_RIZASI",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("d338cd31-ce5d-411d-ad8e-4df4924c1f31"),
                            APIToGetData = "GET /hesaplar/{hspRef}/bakiye",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4770),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "Bakiye nesnesindeki tutarla ilgili bir bilgi değiştiğinde ve HBH rızası içerisinde \"06-Anlık Bakiye Bildirimi\" izin türü varsa oluşturulur.\n\nMevcutta alınmış rızalar için bakiye kaynak tipi özelinde 06 izin türü gerektiğinden; mevcut rızanın yenilenmesine dair müşteriye bilgilendirme yapılarak 06 izin türünü kapsayan yeni rıza alınması süreci YÖS tarafından gerçekleştirilebilir.\n\nBloke tutar değişikliği için olay oluşturma ve bildirimi HHS inisiyatifindedir.\n\nKrdHsp içerisinde yer alan kulKrdTtr değerinin değiştiği durumda olay bildirim gönderilmesi gerekmektedir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Maksimum 10 dakika içerisinde",
                            EventType = "KAYNAK_GUNCELLENDI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4770),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryPolicy = "Retry policy uygulanmamalıdır. İlk istek gönderilemediği durumda İletilemeyen Olaylara eklenmelidir.",
                            SourceNumber = "hspRef",
                            SourceType = "BAKIYE",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("f4386d9e-9df0-4fbd-9b9e-a532e1d98809"),
                            APIToGetData = "",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4850),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "İlgili API İlke ve kurallarına eklendiğinde güncellenecektir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "",
                            EventType = "KAYNAK_GUNCELLENDI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4850),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 30,
                            RetryPolicy = "30 Dakika - 3 Deneme",
                            SourceNumber = "",
                            SourceType = "COKLU_ISLEM_TALEBI",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("0a9d7a66-339f-4ee4-8e08-a2021d44108c"),
                            APIToGetData = "GET /yetkilendirme-kodu?rizaNo={rizaNo}}&rizaTip=O",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4870),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladığında rıza oluşturulur. YÖS'e rıza oluşturulduğuna dair bildirim yapılır. YÖS yetkod değerini sorgulama sonucunda elde eder.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARILI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4870),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "ODEME_EMRI_RIZASI",
                            YOSRole = "ÖBH"
                        },
                        new
                        {
                            Id = new Guid("326b700f-1a5d-4ac5-9db3-4d447a59a6c6"),
                            APIToGetData = "GET /yetkilendirme-kodu?rizaNo={rizaNo}}&rizaTip=H",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4890),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladığında rıza oluşturulur. YÖS'e rıza oluşturulduğuna dair bildirim yapılır. YÖS yetkod değerini sorgulama sonucunda elde eder.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARILI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4890),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "HESAP_BILGISI_RIZASI",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("740b07fd-b0ad-46f8-9f4e-70a881941c1b"),
                            APIToGetData = "GET /odeme-emri-rizasi/{RizaNo}",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4920),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladıktan sonra yaptığı kontroller neticesinde logine izin vermez ise YÖS'e bildirim yapılır. YÖS rıza durumunu sorgulayarak işlemin neden iletilmediğine dair bilgi edinebilir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARISIZ",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4920),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "ODEME_EMRI_RIZASI",
                            YOSRole = "ÖBH"
                        },
                        new
                        {
                            Id = new Guid("74fb00c2-32fd-47f3-9973-da1d1dfb7a97"),
                            APIToGetData = "GET /hesap-bilgisi-rizasi/{RizaNo}",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4940),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS sisteminde ÖHK kendini doğruladıktan sonra yaptığı kontroller neticesinde logine izin vermez ise YÖS'e bildirim yapılır. YÖS rıza durumunu sorgulayarak işlemin neden iletilmediğine dair bilgi edinebilir.",
                            EventNotificationReporter = "HHS",
                            EventNotificationTime = "Anlık",
                            EventType = "AYRIK_GKD_BASARISIZ",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4940),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 1,
                            RetryPolicy = "1 Dakika - 3 Deneme",
                            SourceNumber = "RizaNo",
                            SourceType = "HESAP_BILGISI_RIZASI",
                            YOSRole = "HBH"
                        },
                        new
                        {
                            Id = new Guid("db3e1652-bb2b-4dcf-801d-cc6d0ce4cca9"),
                            APIToGetData = "GET /hhs/{hhsKod}",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4960),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "HHS bilgilerinde değişiklik olduğunda, YÖS'ün hhsKod ile sorgulama yapması ve değişen bilgiyi güncellemesi beklenmektedir",
                            EventNotificationReporter = "BKM",
                            EventNotificationTime = "Anlık",
                            EventType = "HHS_YOS_GUNCELLENDI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4960),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 5,
                            RetryPolicy = "5 Dakika - 3 Deneme",
                            SourceNumber = "hhsKod",
                            SourceType = "HHS",
                            YOSRole = "YÖS"
                        },
                        new
                        {
                            Id = new Guid("92e2ec7d-5aae-426f-9a11-e511239a6a89"),
                            APIToGetData = "GET /yos/{yosKod}",
                            CreatedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4990),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            EventCase = "YÖS bilgilerinde değişiklik olduğunda, HHS'nin yosKod ile sorgulama yapması ve değişen bilgiyi güncellemesi beklenmektedir.",
                            EventNotificationReporter = "BKM",
                            EventNotificationTime = "Anlık",
                            EventType = "HHS_YOS_GUNCELLENDI",
                            IsImmediateNotification = false,
                            ModifiedAt = new DateTime(2024, 6, 21, 11, 13, 36, 220, DateTimeKind.Utc).AddTicks(4990),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RetryCount = 3,
                            RetryInMinute = 5,
                            RetryPolicy = "5 Dakika - 3 Deneme",
                            SourceNumber = "yosKod",
                            SourceType = "YOS",
                            YOSRole = "HHS"
                        });
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBHhsInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AyrikGKD")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBHhsInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<string>("KolasAccountType")
                        .HasColumnType("text");

                    b.Property<long?>("KolasRefNum")
                        .HasColumnType("bigint");

                    b.Property<string>("KolasType")
                        .HasColumnType("text");

                    b.Property<string>("KolasValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCodeFlowType")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeProducerCode")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeRef")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTitle")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountReference")
                        .HasColumnType("text");

                    b.Property<string>("SenderTitle")
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PSNDate")
                        .HasColumnType("text");

                    b.Property<int?>("PSNRefNum")
                        .HasColumnType("integer");

                    b.Property<string>("PSNYosCode")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentServiceUpdateTime")
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystemNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentOrders");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPermissionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBPermissionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBSystemEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBSystemEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBYosInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Adresler")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Roller")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBYosInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("ExpireTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"TokenValue\", '') || ' ' || coalesce(\"TokenType\", ''))", true);

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBAccountConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.OBEventSubscription", "OBEventSubscription")
                        .WithMany("OBEventSubscriptionTypes")
                        .HasForeignKey("OBEventSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OBEventSubscription");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBPaymentConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("Tokens")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Navigation("OBAccountConsentDetails");

                    b.Navigation("OBPaymentConsentDetails");

                    b.Navigation("PaymentOrders");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Navigation("OBEventSubscriptionTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
