// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using amorphie.consent.data;

#nullable disable

namespace amorphie.consent.data.Migrations
{
    [DbContext(typeof(ConsentDbContext))]
    [Migration("20240328115759_OBErrorCodeDetailDataScript")]
    partial class OBErrorCodeDetailDataScript
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ScopeTCKN")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"State\", '') || ' ' || coalesce(\"ConsentType\", '') || ' ' || coalesce(\"AdditionalData\", ''))", true);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateCancelDetailCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("StateModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long?>("UserTCKN")
                        .HasColumnType("bigint");

                    b.Property<string>("Variant")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AccountReferences")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastValidAccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OhkMessage")
                        .HasColumnType("text");

                    b.Property<List<string>>("PermissionTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("SendToServiceDeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SendToServiceLastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SendToServiceTryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TransactionInquiryEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TransactionInquiryStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBAccountConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBErrorCodeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BkmCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InternalCode")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBErrorCodeDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53aa54cf-668d-43a2-bfa0-81ca3a23fbbf"),
                            BkmCode = "TR.OHVPS.Field.Missing",
                            InternalCode = 2,
                            Message = "must not be null",
                            MessageTr = "boş değer olamaz"
                        },
                        new
                        {
                            Id = new Guid("aedab8de-1803-405d-aba7-0bd7780adf64"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 3,
                            Message = "Invalid data.",
                            MessageTr = "Geçersiz veri."
                        },
                        new
                        {
                            Id = new Guid("64348754-891e-4a3a-afb3-acc14837b1f4"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 4,
                            Message = "size must be 4",
                            MessageTr = "boyut '4' olmalı"
                        },
                        new
                        {
                            Id = new Guid("3bb28c87-68ca-4d3c-9327-f5bb1972f872"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 5,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("5f77342f-9ed1-43e6-b064-7ee3e792863f"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 6,
                            Message = "size must be 8",
                            MessageTr = "boyut '8' olmalı"
                        },
                        new
                        {
                            Id = new Guid("194f807a-d685-4d72-88ac-3ab578d235d3"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 7,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("edc568f4-ca13-4a6b-a1ba-437505ef6cdc"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 8,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("b9396999-2fea-42b2-9161-45bfbcfb6790"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 9,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("3a27b20f-c872-4eba-8ff5-5551fe7622dd"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 10,
                            Message = "size must be between 1-9",
                            MessageTr = "boyut '1' ile  '9' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("5fc878ae-f4a2-47ab-a923-f7562a378e32"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 11,
                            Message = "size must be 10",
                            MessageTr = "boyut '10' olmalı"
                        },
                        new
                        {
                            Id = new Guid("d6ff87f3-68ff-49d1-86c3-dabe6bc394ac"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 12,
                            Message = "size must be 26",
                            MessageTr = "boyut '26' olmalı"
                        },
                        new
                        {
                            Id = new Guid("e5b2e5c5-ef4c-49ef-8a5e-6508f2fefb75"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 13,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("b6975bb1-c645-4d5d-9f06-822bd0ea4d10"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 14,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("5db0848b-60e1-480b-9b1a-69344f4875e6"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 15,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("2ba88e80-0efb-49ad-b862-ec1bf062c50e"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 16,
                            Message = "size must be between 1-9",
                            MessageTr = "boyut '1' ile  '9' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("7afe0e99-c77e-4b6b-96f0-7c2a74c08f8c"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 17,
                            Message = "size must be 10",
                            MessageTr = "boyut '10' olmalı"
                        },
                        new
                        {
                            Id = new Guid("608e4a3e-cbb9-4be7-8a9d-701a756601e1"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 18,
                            Message = "Temel hesap bilgisi izni must.",
                            MessageTr = "Temel hesap bilgisi izni seçimi zorunludur."
                        },
                        new
                        {
                            Id = new Guid("a7e259d2-027b-4d65-8b57-6692ef4da22a"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 19,
                            Message = "Detail transactions permission can not be selected without Basic transactions.",
                            MessageTr = "Temelişlem bilgisi izni seçimi yapılmadan ayrıntılı işlem bilgisi seçimi yapılamaz.."
                        },
                        new
                        {
                            Id = new Guid("b5ac5e4e-8f08-4884-aa33-b9f4fdfff882"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 20,
                            Message = "Instant balance notification cannot be selected without selecting balance information permission.",
                            MessageTr = "Bakiye bilgisi izni seçimi yapılmadan anlık bakiye bildirimi seçimi yapılamaz.."
                        },
                        new
                        {
                            Id = new Guid("82d12fc1-f7ee-40a2-9d2a-17b324ace565"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 21,
                            Message = "The minimum value it can take is consent date +1 day, the maximum value it can take is: Consent date + 6 months.",
                            MessageTr = "Alabileceği minimum değer tarihi +1 gün, alabileceği maksimum değer : Rıza tarihi + 6 ay "
                        },
                        new
                        {
                            Id = new Guid("449627e3-afa6-48d7-8f62-68428280d7f3"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 22,
                            Message = "When the Basic Transaction Information/Detailed Transaction Information permission is selected, the hesapIslemBslZmn hesapIslemBtsZmn fields must be filled.",
                            MessageTr = "Temel İşlem bilgisi/ayrıntlı işlem bilgisi izni seçilmiş olduğu zaman hesapIslemBslZmn hesapIslemBtsZmn alanlarının doldurulması zorunludur."
                        },
                        new
                        {
                            Id = new Guid("3917f99d-5a62-4a4b-ba0b-7e1742329888"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 23,
                            Message = "hesapIslemBslZmn hesapIslemBtsZmn fields should only be sent when the Basic Transaction Information/Detailed Transaction Information permission is selected.",
                            MessageTr = "hesapIslemBslZmn hesapIslemBtsZmn alanları sadece Temel İşlem bilgisi/ayrıntlı işlem bilgisi izni seçilmiş olduğu zaman gönderilmelidir."
                        },
                        new
                        {
                            Id = new Guid("dbe5b92d-f17c-400c-8185-70a4be545260"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 24,
                            Message = "Minimum date: Date of consent given – 12 months Maximum date: Date of consent given + 12 months",
                            MessageTr = "Minimum tarih : Rızanın veriliş tarihi – 12 ay Maksimum tarih : Rızanın veriliş tarihi + 12 ay"
                        },
                        new
                        {
                            Id = new Guid("b344c2c1-160b-480e-9ca9-5764e3e28be9"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 24,
                            Message = "Minimum date: Date of consent given – 12 months Maximum date: Date of consent given + 12 months",
                            MessageTr = "Minimum tarih : Rızanın veriliş tarihi – 12 ay Maksimum tarih : Rızanın veriliş tarihi + 12 ay"
                        },
                        new
                        {
                            Id = new Guid("9985bed4-e4e3-46fb-9b5c-fe609ee48764"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 25,
                            Message = "hesapIslemBslZmn can not be later than hesapIslemBtsZmn.",
                            MessageTr = "hesapIslemBslZmn, hesapIslemBtsZmn verisinden sonra olamaz. "
                        },
                        new
                        {
                            Id = new Guid("dda9c3d8-4971-4f1c-9e1f-12b28fb2df14"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 100,
                            Message = "Validation error",
                            MessageTr = "Şema kontrolleri başarısız"
                        },
                        new
                        {
                            Id = new Guid("df379553-da4f-4277-b56f-820274f8314c"),
                            BkmCode = "TR.OHVPS.Connection.InvalidASPSP",
                            InternalCode = 101,
                            Message = "Invalid ASPSP Code",
                            MessageTr = "Geçersiz HHS kodu."
                        },
                        new
                        {
                            Id = new Guid("4a201b66-84a2-4901-8303-4237a047303e"),
                            BkmCode = "TR.OHVPS.Connection.InvalidTPP",
                            InternalCode = 102,
                            Message = "Invalid TPP Code",
                            MessageTr = "Geçersiz Yos kodu."
                        },
                        new
                        {
                            Id = new Guid("d4a8b787-3249-4f8c-b388-0ab01ce89167"),
                            BkmCode = "TR.OHVPS.Business.CustomerInfoMismatch",
                            InternalCode = 104,
                            Message = "kmlk.kmlkVrs - ayrikGkd.ohkTanimDeger must match.",
                            MessageTr = "kmlk.kmlkVrs - ayrikGkd.ohkTanimDeger aynı olmalı."
                        },
                        new
                        {
                            Id = new Guid("e5382130-d481-4978-90c8-2e719684e739"),
                            BkmCode = "TR.OHVPS.Business.EventSubscriptionNotFound",
                            InternalCode = 105,
                            Message = "No evet subscription for AYRIK_GKD_BASARILI and AYRIK_GKD_BASARISIZ.",
                            MessageTr = "AYRIK_GKD_BASARILI ve AYRIK_GKD_BASARISIZ olay tipleri için olay aboneliği yapılmalıdır."
                        },
                        new
                        {
                            Id = new Guid("3bd75801-cf89-4451-84be-56cc1c0a6c07"),
                            BkmCode = "TR.OHVPS.Resource.NotFound",
                            InternalCode = 150,
                            Message = "Resource not found",
                            MessageTr = "Kaynak bulunamadı."
                        },
                        new
                        {
                            Id = new Guid("475faaee-85bf-477f-be5d-5c8ec85454c3"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 200,
                            Message = "PsuInitiated invalid",
                            MessageTr = "PsuInitiated değeri hatalı."
                        },
                        new
                        {
                            Id = new Guid("da7a473a-6d7f-4005-a07e-3756e3ca5d21"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 201,
                            Message = "User reference in header is wrong.",
                            MessageTr = "User reference değeri hatalı."
                        },
                        new
                        {
                            Id = new Guid("48134e2a-8194-405a-ac34-7ce008941bc5"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 160,
                            Message = "Consent not valid to process",
                            MessageTr = "Consent işlem yapılmaya uygun değil."
                        },
                        new
                        {
                            Id = new Guid("591157e3-439a-4aea-86d7-4e14d0a46a02"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 161,
                            Message = "Consent state not valid to delete",
                            MessageTr = "Consent rıza durumu silme işlemine uygun değil."
                        },
                        new
                        {
                            Id = new Guid("0fcd4b14-e0a4-4806-af7e-51c3d0b5b794"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 162,
                            Message = "There is a Authorized / Authorzation Used consent in the system. First cancel the consent.",
                            MessageTr = "Sistemde Yetkilendirildi / Yetki Kullanıldı durumunda rıza olduğu için rıza kabul edilmedi. Öncelikli olarak rızayı iptal ediniz."
                        },
                        new
                        {
                            Id = new Guid("379d979e-b109-4c9c-8046-ed99819d166d"),
                            BkmCode = "TR.OHVPS.Server.InternalError",
                            InternalCode = 151,
                            Message = "Unexpected condition was encountered.",
                            MessageTr = "Beklenmeyen bir durumla karşılaşıldı."
                        });
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("OBEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventSubscriptions");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OBEventSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OBEventSubscriptionId");

                    b.ToTable("OBEventSubscriptionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventTypeSourceTypeRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("APIToGetData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationReporter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsImmediateNotification")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RetryInMinute")
                        .HasColumnType("integer");

                    b.Property<string>("RetryPolicy")
                        .HasColumnType("text");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventTypeSourceTypeRelations");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBHhsInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AyrikGKD")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBHhsInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<string>("KolasAccountType")
                        .HasColumnType("text");

                    b.Property<long?>("KolasRefNum")
                        .HasColumnType("bigint");

                    b.Property<string>("KolasType")
                        .HasColumnType("text");

                    b.Property<string>("KolasValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCodeFlowType")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeProducerCode")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeRef")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountReference")
                        .HasColumnType("text");

                    b.Property<string>("SenderTitle")
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PSNDate")
                        .HasColumnType("text");

                    b.Property<int?>("PSNRefNum")
                        .HasColumnType("integer");

                    b.Property<string>("PSNYosCode")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentServiceUpdateTime")
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystemNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentOrders");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPermissionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBPermissionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBSystemEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBSystemEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBYosInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Adresler")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Roller")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBYosInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("ExpireTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"TokenValue\", '') || ' ' || coalesce(\"TokenType\", ''))", true);

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBAccountConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.OBEventSubscription", "OBEventSubscription")
                        .WithMany("OBEventSubscriptionTypes")
                        .HasForeignKey("OBEventSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OBEventSubscription");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBPaymentConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("Tokens")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Navigation("OBAccountConsentDetails");

                    b.Navigation("OBPaymentConsentDetails");

                    b.Navigation("PaymentOrders");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Navigation("OBEventSubscriptionTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
