// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using amorphie.consent.data;

#nullable disable

namespace amorphie.consent.data.Migrations
{
    [DbContext(typeof(ConsentDbContext))]
    [Migration("20240415225048_ErrorCodeDetailsScript")]
    partial class ErrorCodeDetailsScript
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ScopeTCKN")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"State\", '') || ' ' || coalesce(\"ConsentType\", '') || ' ' || coalesce(\"AdditionalData\", ''))", true);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateCancelDetailCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("StateModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long?>("UserTCKN")
                        .HasColumnType("bigint");

                    b.Property<string>("Variant")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AccountReferences")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastValidAccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OhkMessage")
                        .HasColumnType("text");

                    b.Property<List<string>>("PermissionTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SendToServiceDeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SendToServiceLastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SendToServiceTryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TransactionInquiryEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TransactionInquiryStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBAccountConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBErrorCodeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BkmCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InternalCode")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBErrorCodeDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("346c4eeb-cf85-4e85-a786-567388056461"),
                            BkmCode = "TR.OHVPS.Field.Missing",
                            InternalCode = 2,
                            Message = "must not be null",
                            MessageTr = "boş değer olamaz"
                        },
                        new
                        {
                            Id = new Guid("84e96832-b0b6-495f-87f2-c1a5dfb1aecc"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 3,
                            Message = "Invalid data.",
                            MessageTr = "Geçersiz veri."
                        },
                        new
                        {
                            Id = new Guid("6172522a-c516-46fe-941f-412cb36529ad"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 4,
                            Message = "size must be 4",
                            MessageTr = "boyut '4' olmalı"
                        },
                        new
                        {
                            Id = new Guid("961ee3ba-2657-4c85-a657-a0396fe618ab"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 5,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("6748e925-21b2-40fe-9431-87a2e54a2de6"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 6,
                            Message = "size must be between 1-8",
                            MessageTr = "boyut '1' ile '8' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("d8ebd86a-a2f8-49d2-aecf-0498894463db"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 7,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("cadbbd74-431f-4f8a-b55e-fc55d2fdb25e"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 8,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("943206c5-1c0f-4c65-b808-4e713b86be52"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 9,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("87b9ab37-d8e2-4abd-b531-ed478123331d"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 10,
                            Message = "size must be between 1-9",
                            MessageTr = "boyut '1' ile  '9' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("c0e8ca89-60be-48cf-937b-4cd03b427bb8"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 11,
                            Message = "size must be 10",
                            MessageTr = "boyut '10' olmalı"
                        },
                        new
                        {
                            Id = new Guid("d75ad513-a612-4409-8bea-eb5c9b127321"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 12,
                            Message = "size must be 26",
                            MessageTr = "boyut '26' olmalı"
                        },
                        new
                        {
                            Id = new Guid("351cc3db-9972-489b-9f30-e628cdfe0bc3"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 13,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("6c7839af-9e1c-4548-95db-95025f9a59b3"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 14,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("4a380958-f79d-45d4-a000-99718c9a3e46"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 15,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("2cfdc525-0b8b-4722-ab48-0fba83a2b895"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 16,
                            Message = "size must be between 1-9",
                            MessageTr = "boyut '1' ile  '9' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("1ea3312f-f6b2-49d6-a97d-6258ce17ed71"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 17,
                            Message = "size must be 10",
                            MessageTr = "boyut '10' olmalı"
                        },
                        new
                        {
                            Id = new Guid("d6ee560c-7189-43f8-8f4c-075fdbee0ef9"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 18,
                            Message = "Temel hesap bilgisi izni must.",
                            MessageTr = "Temel hesap bilgisi izni seçimi zorunludur."
                        },
                        new
                        {
                            Id = new Guid("7d18d600-41be-4c09-8fd1-fcbfb155b27a"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 19,
                            Message = "Detail transactions permission can not be selected without Basic transactions.",
                            MessageTr = "Temelişlem bilgisi izni seçimi yapılmadan ayrıntılı işlem bilgisi seçimi yapılamaz.."
                        },
                        new
                        {
                            Id = new Guid("5a48ae18-d4c7-4725-a2ef-48f1950ae93c"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 20,
                            Message = "Instant balance notification cannot be selected without selecting balance information permission.",
                            MessageTr = "Bakiye bilgisi izni seçimi yapılmadan anlık bakiye bildirimi seçimi yapılamaz.."
                        },
                        new
                        {
                            Id = new Guid("e35192bb-2490-4166-8c86-1084231e0898"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 21,
                            Message = "The minimum value it can take is consent date +1 day, the maximum value it can take is: Consent date + 6 months.",
                            MessageTr = "Alabileceği minimum değer tarihi +1 gün, alabileceği maksimum değer : Rıza tarihi + 6 ay "
                        },
                        new
                        {
                            Id = new Guid("7098aeb3-7f1f-4c2e-bc6d-4b8367bd2168"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 22,
                            Message = "When the Basic Transaction Information/Detailed Transaction Information permission is selected, the hesapIslemBslZmn hesapIslemBtsZmn fields must be filled.",
                            MessageTr = "Temel İşlem bilgisi/ayrıntlı işlem bilgisi izni seçilmiş olduğu zaman hesapIslemBslZmn hesapIslemBtsZmn alanlarının doldurulması zorunludur."
                        },
                        new
                        {
                            Id = new Guid("b3264a29-9abf-4605-9930-276b17b0e6bf"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 23,
                            Message = "hesapIslemBslZmn hesapIslemBtsZmn fields should only be sent when the Basic Transaction Information/Detailed Transaction Information permission is selected.",
                            MessageTr = "hesapIslemBslZmn hesapIslemBtsZmn alanları sadece Temel İşlem bilgisi/ayrıntlı işlem bilgisi izni seçilmiş olduğu zaman gönderilmelidir."
                        },
                        new
                        {
                            Id = new Guid("48161774-f8fd-46c1-ad40-f67ac51b32e0"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 24,
                            Message = "Minimum date: Date of consent given – 12 months Maximum date: Date of consent given + 12 months",
                            MessageTr = "Minimum tarih : Rızanın veriliş tarihi – 12 ay Maksimum tarih : Rızanın veriliş tarihi + 12 ay"
                        },
                        new
                        {
                            Id = new Guid("95d08f9f-21d2-4000-90ae-0b6683137f51"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 24,
                            Message = "Minimum date: Date of consent given – 12 months Maximum date: Date of consent given + 12 months",
                            MessageTr = "Minimum tarih : Rızanın veriliş tarihi – 12 ay Maksimum tarih : Rızanın veriliş tarihi + 12 ay"
                        },
                        new
                        {
                            Id = new Guid("852ca27f-4193-4d7e-8f37-bb0f53c91dab"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 25,
                            Message = "hesapIslemBslZmn can not be later than hesapIslemBtsZmn.",
                            MessageTr = "hesapIslemBslZmn, hesapIslemBtsZmn verisinden sonra olamaz. "
                        },
                        new
                        {
                            Id = new Guid("568a9ff8-bb99-4b97-bc10-296714697379"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 100,
                            Message = "Validation error",
                            MessageTr = "Şema kontrolleri başarısız"
                        },
                        new
                        {
                            Id = new Guid("8b8d1442-f5f7-48b0-b521-8d271b6c463f"),
                            BkmCode = "TR.OHVPS.Connection.InvalidASPSP",
                            InternalCode = 101,
                            Message = "Invalid ASPSP Code",
                            MessageTr = "Geçersiz HHS kodu."
                        },
                        new
                        {
                            Id = new Guid("70858d02-6763-4a37-9f0e-ebd3c2a3dc41"),
                            BkmCode = "TR.OHVPS.Connection.InvalidTPP",
                            InternalCode = 102,
                            Message = "Invalid TPP Code",
                            MessageTr = "Geçersiz Yos kodu."
                        },
                        new
                        {
                            Id = new Guid("b8e367a4-4b63-40a5-ad32-0f04e70c9e93"),
                            BkmCode = "TR.OHVPS.Business.CustomerInfoMismatch",
                            InternalCode = 104,
                            Message = "kmlk.kmlkVrs - ayrikGkd.ohkTanimDeger must match.",
                            MessageTr = "kmlk.kmlkVrs - ayrikGkd.ohkTanimDeger aynı olmalı."
                        },
                        new
                        {
                            Id = new Guid("ddd17f2d-b85f-4e03-aca5-2baa240a8334"),
                            BkmCode = "TR.OHVPS.Business.EventSubscriptionNotFound",
                            InternalCode = 105,
                            Message = "No evet subscription for AYRIK_GKD_BASARILI and AYRIK_GKD_BASARISIZ.",
                            MessageTr = "AYRIK_GKD_BASARILI ve AYRIK_GKD_BASARISIZ olay tipleri için olay aboneliği yapılmalıdır."
                        },
                        new
                        {
                            Id = new Guid("34a0750e-7fda-4e4a-bdc7-c0b4977280ec"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 106,
                            Message = "syfKytSayi value is not valid. syfKytSayi can be between 1-100",
                            MessageTr = "syfKytSayi değeri geçersiz. 1-100 aralığında olabilir."
                        },
                        new
                        {
                            Id = new Guid("16bcbc09-3641-4e7b-8f49-70e7a66257c1"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 107,
                            Message = "srlmKrtr value is not valid. it should be hspRef",
                            MessageTr = "srlmKrtr değeri geçersiz. Olması gereken değer hspRef."
                        },
                        new
                        {
                            Id = new Guid("44060e83-dadd-455a-8629-693cc9e2a05a"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 108,
                            Message = "srlmYon value is not valid.",
                            MessageTr = "srlmYon değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("14b1b63c-e87d-4601-8129-9d5711c8c5c5"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 109,
                            Message = "hesapIslemBtsTrh,hesapIslemBslTrh values not valid",
                            MessageTr = "hesapIslemBtsTrh,hesapIslemBslTrh değerleri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("a5a31e98-fe46-4085-aa6b-c6ddd5559c20"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 110,
                            Message = "hesapIslemBtsTrh can not be later than enquiry datetime.",
                            MessageTr = "hesapIslemBtsTrh sorgulama zamanından sonra olamaz."
                        },
                        new
                        {
                            Id = new Guid("6baf2a76-69b9-40f9-9ec7-9a714331fe00"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 111,
                            Message = "hesapIslemBtsTrh can not be early than hesapIslemBslTrh.",
                            MessageTr = "hesapIslemBtsTrh hesapIslemBslTrh den önce olamaz."
                        },
                        new
                        {
                            Id = new Guid("0d50c0c1-ed01-4b67-9e49-dbc419f5b8db"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 112,
                            Message = "hesapIslemBtsTrh hesapIslemBslTrh difference can be maximum 1 month.",
                            MessageTr = "hesapIslemBslTrh ve hesapIslemBtsTrh arası fark bireysel ÖHK’lar için en fazla 1 ay olabilir."
                        },
                        new
                        {
                            Id = new Guid("dfcc500a-b22b-44f9-a35d-0475cda2c78a"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 113,
                            Message = "hesapIslemBtsTrh hesapIslemBslTrh difference can be maximum 1 week.",
                            MessageTr = "hesapIslemBslTrh ve hesapIslemBtsTrh arası fark kurumsal ÖHK’lar için en fazla 1 hafta olabilir."
                        },
                        new
                        {
                            Id = new Guid("a52fdb22-7222-41dd-8503-cdd626495bf0"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 114,
                            Message = "For system enquiry, last 24 hours can be enquirable.",
                            MessageTr = "sistemsel yapılan sorgulamalarda hem bireysel, hem de kurumsal ÖHK’lar için;son 24 saat sorgulanabilir."
                        },
                        new
                        {
                            Id = new Guid("ef07e888-175b-46f9-bd3e-e2581c13bef2"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 115,
                            Message = "brcAlc value is not valid.",
                            MessageTr = "brcAlc değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("ec09f1f9-bffd-48e4-8a89-526b6abf4faf"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 116,
                            Message = "srlmKrtr value is not valid. it should be islGrckZaman",
                            MessageTr = "srlmKrtr değeri geçersiz. Olması gereken değer islGrckZaman."
                        },
                        new
                        {
                            Id = new Guid("196d6149-1a87-4df8-a70e-bf8b02dc2821"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 117,
                            Message = "minIslTtr value is not valid.",
                            MessageTr = "minIslTtr değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("d74b07c8-4e51-4667-99b1-0ba2f6d0ac21"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 118,
                            Message = "mksIslTtr value is not valid.",
                            MessageTr = "mksIslTtr değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("2a563a1d-808a-44ac-97f6-b48a195f60fb"),
                            BkmCode = "TR.OHVPS.Resource.NotFound",
                            InternalCode = 150,
                            Message = "Resource not found",
                            MessageTr = "Kaynak bulunamadı."
                        },
                        new
                        {
                            Id = new Guid("b9318747-0068-4ca3-830a-3b2d133a5ff3"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 200,
                            Message = "PsuInitiated invalid",
                            MessageTr = "PsuInitiated değeri hatalı."
                        },
                        new
                        {
                            Id = new Guid("b8c32564-60c5-4946-bd62-183b3ea01df0"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 201,
                            Message = "User reference in header is wrong.",
                            MessageTr = "User reference değeri hatalı."
                        },
                        new
                        {
                            Id = new Guid("66242d5b-1beb-4ea2-9faf-3eefc93129a8"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 160,
                            Message = "Consent not valid to process",
                            MessageTr = "Consent işlem yapılmaya uygun değil."
                        },
                        new
                        {
                            Id = new Guid("bf2e98e1-20eb-453c-beca-dbeebc2e21f4"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 161,
                            Message = "Consent state not valid to delete",
                            MessageTr = "Consent rıza durumu silme işlemine uygun değil."
                        },
                        new
                        {
                            Id = new Guid("13697d97-4d10-4c02-bf90-4b2da7f0e6c3"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 162,
                            Message = "There is a Authorized / Authorzation Used consent in the system. First cancel the consent.",
                            MessageTr = "Sistemde Yetkilendirildi / Yetki Kullanıldı durumunda rıza olduğu için rıza kabul edilmedi. Öncelikli olarak rızayı iptal ediniz."
                        },
                        new
                        {
                            Id = new Guid("41055406-4c99-4eef-b4fb-6e01dd6a864f"),
                            BkmCode = "TR.OHVPS.Server.InternalError",
                            InternalCode = 151,
                            Message = "Unexpected condition was encountered.",
                            MessageTr = "Beklenmeyen bir durumla karşılaşıldı."
                        },
                        new
                        {
                            Id = new Guid("ceb914d8-0c66-4ce2-ac03-a1e5ef650b2b"),
                            BkmCode = "TR.OHVPS.Server.InternalError",
                            InternalCode = 152,
                            Message = "By Checking Idempotency Unexpected condition was encountered.",
                            MessageTr = "Idempotency kontrol edilirken beklenmeyen bir durumla karşılaşıldı."
                        });
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("OBEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventSubscriptions");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OBEventSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OBEventSubscriptionId");

                    b.ToTable("OBEventSubscriptionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventTypeSourceTypeRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("APIToGetData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationReporter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsImmediateNotification")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RetryInMinute")
                        .HasColumnType("integer");

                    b.Property<string>("RetryPolicy")
                        .HasColumnType("text");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventTypeSourceTypeRelations");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBHhsInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AyrikGKD")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBHhsInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<string>("KolasAccountType")
                        .HasColumnType("text");

                    b.Property<long?>("KolasRefNum")
                        .HasColumnType("bigint");

                    b.Property<string>("KolasType")
                        .HasColumnType("text");

                    b.Property<string>("KolasValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCodeFlowType")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeProducerCode")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeRef")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountReference")
                        .HasColumnType("text");

                    b.Property<string>("SenderTitle")
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PSNDate")
                        .HasColumnType("text");

                    b.Property<int?>("PSNRefNum")
                        .HasColumnType("integer");

                    b.Property<string>("PSNYosCode")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentServiceUpdateTime")
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystemNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentOrders");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPermissionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBPermissionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBSystemEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBSystemEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBYosInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Adresler")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Roller")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBYosInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("ExpireTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"TokenValue\", '') || ' ' || coalesce(\"TokenType\", ''))", true);

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBAccountConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.OBEventSubscription", "OBEventSubscription")
                        .WithMany("OBEventSubscriptionTypes")
                        .HasForeignKey("OBEventSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OBEventSubscription");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBPaymentConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("Tokens")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Navigation("OBAccountConsentDetails");

                    b.Navigation("OBPaymentConsentDetails");

                    b.Navigation("PaymentOrders");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Navigation("OBEventSubscriptionTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
