// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using amorphie.consent.data;

#nullable disable

namespace amorphie.consent.data.Migrations
{
    [DbContext(typeof(ConsentDbContext))]
    partial class ConsentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ScopeTCKN")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"State\", '') || ' ' || coalesce(\"ConsentType\", '') || ' ' || coalesce(\"AdditionalData\", ''))", true);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateCancelDetailCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("StateModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long?>("UserTCKN")
                        .HasColumnType("bigint");

                    b.Property<string>("Variant")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AccountReferences")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastValidAccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OhkMessage")
                        .HasColumnType("text");

                    b.Property<List<string>>("PermissionTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SendToServiceDeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SendToServiceLastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SendToServiceTryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TransactionInquiryEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TransactionInquiryStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBAccountConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBErrorCodeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BkmCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InternalCode")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBErrorCodeDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("841bf229-a9ac-4fb1-9e20-1ee6fdd223d8"),
                            BkmCode = "TR.OHVPS.Field.Missing",
                            InternalCode = 2,
                            Message = "must not be null",
                            MessageTr = "boş değer olamaz"
                        },
                        new
                        {
                            Id = new Guid("b5710db9-4d09-486c-adc4-4e925596e201"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 3,
                            Message = "Invalid data.",
                            MessageTr = "Geçersiz veri."
                        },
                        new
                        {
                            Id = new Guid("dd1033b1-7fe1-4e7b-bb29-d9e6cf351fe7"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 4,
                            Message = "size must be 4",
                            MessageTr = "boyut '4' olmalı"
                        },
                        new
                        {
                            Id = new Guid("35b0e4ff-f937-4ba6-a727-d4ed707c8265"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 5,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("60f86d3f-4c2d-4c9b-92f0-1e0c553ab03a"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 6,
                            Message = "size must be between 1-8",
                            MessageTr = "boyut '1' ile '8' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("efe0e6db-bb22-4803-8713-72ec0139fa55"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 7,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("0f6af59f-3695-4599-a724-e20077ad1ed1"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 8,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("156e8aed-b41d-444f-af59-de557a70fb6a"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 9,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("c6c61977-dc31-4e7e-b075-23bea1a5c7a2"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 10,
                            Message = "size must be between 1-9",
                            MessageTr = "boyut '1' ile  '9' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("d475571b-0308-4f96-b733-91f51e99340f"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 11,
                            Message = "size must be 10",
                            MessageTr = "boyut '10' olmalı"
                        },
                        new
                        {
                            Id = new Guid("07c20c1a-cbe6-414e-ab0b-f2b3a39154be"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 12,
                            Message = "size must be 26",
                            MessageTr = "boyut '26' olmalı"
                        },
                        new
                        {
                            Id = new Guid("b7fef618-dd1e-40d6-8822-0eb73801b4b7"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 13,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("cc536003-e51e-48eb-a26a-24cd09ef1e25"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 14,
                            Message = "size must be between 1-30",
                            MessageTr = "boyut '1' ile  '30' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("f76bec1e-f329-4767-86a9-0c5747002354"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 15,
                            Message = "size must be 11",
                            MessageTr = "boyut '11' olmalı"
                        },
                        new
                        {
                            Id = new Guid("c6ac0347-c639-486e-b7e5-99fa5230264d"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 16,
                            Message = "size must be between 1-9",
                            MessageTr = "boyut '1' ile  '9' arasında olmalı"
                        },
                        new
                        {
                            Id = new Guid("579047dd-e9b4-48ba-bcf6-f7b94cdd3a22"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 17,
                            Message = "size must be 10",
                            MessageTr = "boyut '10' olmalı"
                        },
                        new
                        {
                            Id = new Guid("fb8f8ad6-dd0b-44d4-8508-bc9285567ba7"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 18,
                            Message = "Temel hesap bilgisi izni must.",
                            MessageTr = "Temel hesap bilgisi izni seçimi zorunludur."
                        },
                        new
                        {
                            Id = new Guid("22758959-655b-4136-9a6d-400e27160eaf"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 19,
                            Message = "Detail transactions permission can not be selected without Basic transactions.",
                            MessageTr = "Temelişlem bilgisi izni seçimi yapılmadan ayrıntılı işlem bilgisi seçimi yapılamaz.."
                        },
                        new
                        {
                            Id = new Guid("f07ec1e2-b90e-4095-9bd4-92335da4ed4d"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 20,
                            Message = "Instant balance notification cannot be selected without selecting balance information permission.",
                            MessageTr = "Bakiye bilgisi izni seçimi yapılmadan anlık bakiye bildirimi seçimi yapılamaz.."
                        },
                        new
                        {
                            Id = new Guid("24113782-4116-42b0-9b34-40ec3e76c7f7"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 21,
                            Message = "The minimum value it can take is consent date +1 day, the maximum value it can take is: Consent date + 6 months.",
                            MessageTr = "Alabileceği minimum değer tarihi +1 gün, alabileceği maksimum değer : Rıza tarihi + 6 ay "
                        },
                        new
                        {
                            Id = new Guid("afa15290-1e59-49f3-a468-2106591239c9"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 22,
                            Message = "When the Basic Transaction Information/Detailed Transaction Information permission is selected, the hesapIslemBslZmn hesapIslemBtsZmn fields must be filled.",
                            MessageTr = "Temel İşlem bilgisi/ayrıntlı işlem bilgisi izni seçilmiş olduğu zaman hesapIslemBslZmn hesapIslemBtsZmn alanlarının doldurulması zorunludur."
                        },
                        new
                        {
                            Id = new Guid("d6905ef6-9d21-4c82-a2ab-ec18b8860341"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 23,
                            Message = "hesapIslemBslZmn hesapIslemBtsZmn fields should only be sent when the Basic Transaction Information/Detailed Transaction Information permission is selected.",
                            MessageTr = "hesapIslemBslZmn hesapIslemBtsZmn alanları sadece Temel İşlem bilgisi/ayrıntlı işlem bilgisi izni seçilmiş olduğu zaman gönderilmelidir."
                        },
                        new
                        {
                            Id = new Guid("cd238a9b-0a8d-40c9-908f-491f51638865"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 24,
                            Message = "Minimum date: Date of consent given – 12 months Maximum date: Date of consent given + 12 months",
                            MessageTr = "Minimum tarih : Rızanın veriliş tarihi – 12 ay Maksimum tarih : Rızanın veriliş tarihi + 12 ay"
                        },
                        new
                        {
                            Id = new Guid("d815a9bb-2f04-4cb7-a7e9-a27c13fda62e"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 24,
                            Message = "Minimum date: Date of consent given – 12 months Maximum date: Date of consent given + 12 months",
                            MessageTr = "Minimum tarih : Rızanın veriliş tarihi – 12 ay Maksimum tarih : Rızanın veriliş tarihi + 12 ay"
                        },
                        new
                        {
                            Id = new Guid("f7b66a7d-d2bf-4686-a8ea-bf4314da810b"),
                            BkmCode = "TR.OHVPS.Field.Invalid",
                            InternalCode = 25,
                            Message = "hesapIslemBslZmn can not be later than hesapIslemBtsZmn.",
                            MessageTr = "hesapIslemBslZmn, hesapIslemBtsZmn verisinden sonra olamaz. "
                        },
                        new
                        {
                            Id = new Guid("8e32e9e1-ea0d-4b71-a61a-82f049e2abad"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 100,
                            Message = "Validation error",
                            MessageTr = "Şema kontrolleri başarısız"
                        },
                        new
                        {
                            Id = new Guid("fe36bb90-8d1e-45ac-a817-7ed57599352f"),
                            BkmCode = "TR.OHVPS.Connection.InvalidASPSP",
                            InternalCode = 101,
                            Message = "Invalid ASPSP Code",
                            MessageTr = "Geçersiz HHS kodu."
                        },
                        new
                        {
                            Id = new Guid("c86ab026-813a-4c04-a7af-8e7ac1fc8e82"),
                            BkmCode = "TR.OHVPS.Connection.InvalidTPP",
                            InternalCode = 102,
                            Message = "Invalid TPP Code",
                            MessageTr = "Geçersiz Yos kodu."
                        },
                        new
                        {
                            Id = new Guid("fdfb334f-6839-44bd-a811-fcda2dd3dba8"),
                            BkmCode = "TR.OHVPS.Business.CustomerInfoMismatch",
                            InternalCode = 104,
                            Message = "kmlk.kmlkVrs - ayrikGkd.ohkTanimDeger must match.",
                            MessageTr = "kmlk.kmlkVrs - ayrikGkd.ohkTanimDeger aynı olmalı."
                        },
                        new
                        {
                            Id = new Guid("725f5be5-4fa6-49ea-b831-467008f9ebd7"),
                            BkmCode = "TR.OHVPS.Business.EventSubscriptionNotFound",
                            InternalCode = 105,
                            Message = "No evet subscription for AYRIK_GKD_BASARILI and AYRIK_GKD_BASARISIZ.",
                            MessageTr = "AYRIK_GKD_BASARILI ve AYRIK_GKD_BASARISIZ olay tipleri için olay aboneliği yapılmalıdır."
                        },
                        new
                        {
                            Id = new Guid("87b8e90f-43b9-4c53-bb6e-128f2fee17a3"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 106,
                            Message = "syfKytSayi value is not valid. syfKytSayi can be between 1-100",
                            MessageTr = "syfKytSayi değeri geçersiz. 1-100 aralığında olabilir."
                        },
                        new
                        {
                            Id = new Guid("d6f908c8-b580-4525-9cab-4e84b9b3f321"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 107,
                            Message = "srlmKrtr value is not valid. it should be hspRef",
                            MessageTr = "srlmKrtr değeri geçersiz. Olması gereken değer hspRef."
                        },
                        new
                        {
                            Id = new Guid("5351a02e-2a59-45e7-9509-8e6a37051d4f"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 108,
                            Message = "srlmYon value is not valid.",
                            MessageTr = "srlmYon değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("f733643d-fb83-440a-a2c5-66809aa30acf"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 109,
                            Message = "hesapIslemBtsTrh,hesapIslemBslTrh values not valid",
                            MessageTr = "hesapIslemBtsTrh,hesapIslemBslTrh değerleri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("02ac284d-169a-4ba2-90fc-a1c767f5c6a3"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 110,
                            Message = "hesapIslemBtsTrh can not be later than enquiry datetime.",
                            MessageTr = "hesapIslemBtsTrh sorgulama zamanından sonra olamaz."
                        },
                        new
                        {
                            Id = new Guid("88e2b05a-1e69-47fd-bbf9-c26e82aadddc"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 111,
                            Message = "hesapIslemBtsTrh can not be early than hesapIslemBslTrh.",
                            MessageTr = "hesapIslemBtsTrh hesapIslemBslTrh den önce olamaz."
                        },
                        new
                        {
                            Id = new Guid("992e3262-fe09-4f68-8cf4-e0ba3dc0f90c"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 112,
                            Message = "hesapIslemBtsTrh hesapIslemBslTrh difference can be maximum 1 month.",
                            MessageTr = "hesapIslemBslTrh ve hesapIslemBtsTrh arası fark bireysel ÖHK’lar için en fazla 1 ay olabilir."
                        },
                        new
                        {
                            Id = new Guid("f76a86ee-ef8c-43b9-996e-e8c6d258e158"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 113,
                            Message = "hesapIslemBtsTrh hesapIslemBslTrh difference can be maximum 1 week.",
                            MessageTr = "hesapIslemBslTrh ve hesapIslemBtsTrh arası fark kurumsal ÖHK’lar için en fazla 1 hafta olabilir."
                        },
                        new
                        {
                            Id = new Guid("9744a249-d6b7-4404-af8e-1bffb14d944a"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 114,
                            Message = "For system enquiry, last 24 hours can be enquirable.",
                            MessageTr = "sistemsel yapılan sorgulamalarda hem bireysel, hem de kurumsal ÖHK’lar için;son 24 saat sorgulanabilir."
                        },
                        new
                        {
                            Id = new Guid("5a4450ae-8e80-4405-9557-bc6cff791b40"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 115,
                            Message = "brcAlc value is not valid.",
                            MessageTr = "brcAlc değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("ea93d68c-db26-4dd7-bca7-24598cace8b0"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 116,
                            Message = "srlmKrtr value is not valid. it should be islGrckZaman",
                            MessageTr = "srlmKrtr değeri geçersiz. Olması gereken değer islGrckZaman."
                        },
                        new
                        {
                            Id = new Guid("9cea46aa-7b58-4ef8-a697-8d959685fc4c"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 117,
                            Message = "minIslTtr value is not valid.",
                            MessageTr = "minIslTtr değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("c2f14416-e3c3-44d9-bdcb-8d1570479d82"),
                            BkmCode = "TR.OHVPS.Resource.InvalidFormat",
                            InternalCode = 118,
                            Message = "mksIslTtr value is not valid.",
                            MessageTr = "mksIslTtr değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("07871055-f172-4853-b369-42e582b0aa4d"),
                            BkmCode = "TR.OHVPS.Resource.NotFound",
                            InternalCode = 150,
                            Message = "Resource not found",
                            MessageTr = "Kaynak bulunamadı."
                        },
                        new
                        {
                            Id = new Guid("34e053e3-9a70-4082-9040-3f4efd33e649"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 200,
                            Message = "PsuInitiated invalid",
                            MessageTr = "PsuInitiated değeri hatalı."
                        },
                        new
                        {
                            Id = new Guid("fce8b4e0-133a-4abd-b1a5-8e541abf9e51"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 201,
                            Message = "User reference in header is wrong.",
                            MessageTr = "User reference değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("a6da080d-4cc4-4e72-8042-d7d8f9fc26b8"),
                            BkmCode = "TR.OHVPS.Business.InvalidContent",
                            InternalCode = 202,
                            Message = "OpenBanking Consent Id in header is invalid.",
                            MessageTr = "OpenBanking Consent Id değeri geçersiz."
                        },
                        new
                        {
                            Id = new Guid("c06ed343-0360-48a9-a166-552036cd8b0c"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 160,
                            Message = "Consent not valid to process",
                            MessageTr = "Consent işlem yapılmaya uygun değil."
                        },
                        new
                        {
                            Id = new Guid("deb787b8-54b5-4142-aed5-0faaa4a01274"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 161,
                            Message = "Consent state not valid to delete",
                            MessageTr = "Consent rıza durumu silme işlemine uygun değil."
                        },
                        new
                        {
                            Id = new Guid("e333d225-6f95-4970-b449-366b791b588f"),
                            BkmCode = "TR.OHVPS.Resource.ConsentMismatch",
                            InternalCode = 162,
                            Message = "There is a Authorized / Authorzation Used consent in the system. First cancel the consent.",
                            MessageTr = "Sistemde Yetkilendirildi / Yetki Kullanıldı durumunda rıza olduğu için rıza kabul edilmedi. Öncelikli olarak rızayı iptal ediniz."
                        },
                        new
                        {
                            Id = new Guid("c0425ded-7786-4f4f-ad15-ff899dd44a1d"),
                            BkmCode = "TR.OHVPS.Resource.ConsentRevoked",
                            InternalCode = 163,
                            Message = "Consent ended. Not valid to process.",
                            MessageTr = "Sonlandırılmış rıza için işlem yapılamaz."
                        },
                        new
                        {
                            Id = new Guid("361c5a8d-837f-4807-a6a4-dc8d61337cd3"),
                            BkmCode = "TR.OHVPS.Resource.ConsentRevoked",
                            InternalCode = 164,
                            Message = "Consent state is not authorization used. Not valid to process.",
                            MessageTr = "Rıza durumu yetki kullanıldı olmadığı için işlem yapılamaz."
                        },
                        new
                        {
                            Id = new Guid("e8c3ff38-8175-4695-a22e-e1c676105af5"),
                            BkmCode = "TR.OHVPS.Server.InternalError",
                            InternalCode = 151,
                            Message = "Unexpected condition was encountered.",
                            MessageTr = "Beklenmeyen bir durumla karşılaşıldı."
                        },
                        new
                        {
                            Id = new Guid("6ef3e43d-3313-4c9f-8e58-83ba1942575e"),
                            BkmCode = "TR.OHVPS.Server.InternalError",
                            InternalCode = 152,
                            Message = "By Checking Idempotency Unexpected condition was encountered.",
                            MessageTr = "Idempotency kontrol edilirken beklenmeyen bir durumla karşılaşıldı."
                        });
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("OBEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventSubscriptions");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OBEventSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OBEventSubscriptionId");

                    b.ToTable("OBEventSubscriptionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventTypeSourceTypeRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("APIToGetData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("EventCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationReporter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventNotificationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsImmediateNotification")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RetryInMinute")
                        .HasColumnType("integer");

                    b.Property<string>("RetryPolicy")
                        .HasColumnType("text");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBEventTypeSourceTypeRelations");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBHhsInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AyrikGKD")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBHhsInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AuthCompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionType")
                        .HasColumnType("text");

                    b.Property<string>("DiscreteGKDDefinitionValue")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HhsForwardingAddress")
                        .HasColumnType("text");

                    b.Property<string>("IdentityData")
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityData")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionIdentityType")
                        .HasColumnType("text");

                    b.Property<string>("KolasAccountType")
                        .HasColumnType("text");

                    b.Property<long?>("KolasRefNum")
                        .HasColumnType("bigint");

                    b.Property<string>("KolasType")
                        .HasColumnType("text");

                    b.Property<string>("KolasValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCodeFlowType")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeProducerCode")
                        .HasColumnType("text");

                    b.Property<string>("QRCodeRef")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("SenderAccountReference")
                        .HasColumnType("text");

                    b.Property<string>("SenderTitle")
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentConsentDetails");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CheckSumLastValiDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CheckSumValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneralWorkplaceNumber")
                        .HasColumnType("text");

                    b.Property<string>("HhsCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("OHKMessage")
                        .HasColumnType("text");

                    b.Property<string>("PSNDate")
                        .HasColumnType("text");

                    b.Property<int?>("PSNRefNum")
                        .HasColumnType("integer");

                    b.Property<string>("PSNYosCode")
                        .HasColumnType("text");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentServiceUpdateTime")
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSystemNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceInformation")
                        .HasColumnType("text");

                    b.Property<string>("SaveResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubWorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkplaceCategoryCode")
                        .HasColumnType("text");

                    b.Property<string>("XGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("OBPaymentOrders");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPermissionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBPermissionTypes");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBSystemEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HHSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TryCount")
                        .HasColumnType("integer");

                    b.Property<string>("XRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YOSCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBSystemEvents");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBYosInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcikAnahtar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Adresler")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoBilgileri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Roller")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Unv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OBYosInfos");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<int>("ExpireTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"TokenValue\", '') || ' ' || coalesce(\"TokenType\", ''))", true);

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBAccountConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBAccountConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscriptionType", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.OBEventSubscription", "OBEventSubscription")
                        .WithMany("OBEventSubscriptionTypes")
                        .HasForeignKey("OBEventSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OBEventSubscription");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentConsentDetail", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("OBPaymentConsentDetails")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBPaymentOrder", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Token", b =>
                {
                    b.HasOne("amorphie.consent.core.Model.Consent", "Consent")
                        .WithMany("Tokens")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.Consent", b =>
                {
                    b.Navigation("OBAccountConsentDetails");

                    b.Navigation("OBPaymentConsentDetails");

                    b.Navigation("PaymentOrders");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("amorphie.consent.core.Model.OBEventSubscription", b =>
                {
                    b.Navigation("OBEventSubscriptionTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
